@page "/"
@using faceoff.Core

@inject faceoff.Core.FaceOffService FaceOffService

<h3>FaceOffCore Integration</h3> 

@inject ImageHandler IH
<div id="container" style="position: relative;">
    <CameraStreamer @ref=CameraStreamerReference
                Width=900
                Height=675
                OnRendered=OnRenderedHandler
                OnFrame=OnFrameHandler
                CameraID=@cameraId
                Style="width: 900px; height:675px; border: 10px solid black; border-radius: 2%;"
                Autostart />
    
    @foreach (var faceData in faceEmotionDataList) {
        <div class="frame" style="@faceData.TrackingStyle">
            <div class="emotion-container @faceData.EmotionClass" style="@faceData.ContainerStyle">
                    <div class="frame-content" style="@faceData.ColorStyle" />
                <div class="emotion-indicator">
                    <div class="emotion-text" style="color: @faceData.HtmlColor">
                        <span class="emotion-label">@faceData.MoodText</span>
                        <div class="emotion-confidence">@(faceData.Confidence > 0 ? $"{faceData.Confidence:P0}" : "")</div>
                    </div>
                    <div class="emotion-icon">@GetEmotionIcon(faceData.MoodText)</div>
                </div>
            </div>
        </div>
    }
</div>


@code
{
    private List<DetectedFace> faces = new();
    private List<FaceEmotionData> faceEmotionDataList = new();

    private CameraStreamer CameraStreamerReference;
    private string cameraId = null;

    private EmotionDetectionService _emotionService;

    protected override void OnInitialized()
    {
        _emotionService = new EmotionDetectionService("onnx_model.onnx");
        base.OnInitialized();
    }

    private async void OnRenderedHandler()
    {
        if (await CameraStreamerReference.GetCameraAccessAsync())
        {
            await CameraStreamerReference.ReloadAsync();
        }
    }

private async void OnFrameHandler(string data)
{
    data = data[(data.IndexOf(',') + 1)..];

    // Converts base64 string to byteArray
    byte[] byteArray = System.Convert.FromBase64String(data);

    faces = FaceOffService.CameraImageFeed(byteArray);
    faceEmotionDataList.Clear(); // Clear previous data

    foreach (var face in faces.Select((face, index) => new { face, index }))
    {
        var emotionResult = await _emotionService.DetectEmotion(face.face, byteArray);

        var faceData = new FaceEmotionData
        {
            FaceId = face.index,  // Assign unique face ID (or index)
            Confidence = emotionResult.Confidence,
            MoodText = char.ToUpper(emotionResult.Emotion[0]) + emotionResult.Emotion.Substring(1),
        };



        // Set styles based on emotion **before** tracking the frame
        switch (emotionResult.Emotion.ToLower())
        {
            case "happy":
                faceData.HtmlColor = "#4CAF50";
                faceData.EmotionClass = "emotion-happy";
                faceData.ColorStyle = "border-color: #4CAF50";
                break;
            case "sad":
                faceData.HtmlColor = "#2196F3";
                faceData.EmotionClass = "emotion-sad";
                faceData.ColorStyle = "border-color: #2196F3";
                break;
            case "angry":
                faceData.HtmlColor = "#F44336";
                faceData.EmotionClass = "emotion-angry";
                faceData.ColorStyle = "border-color: #F44336";
                break;
            default:
                faceData.HtmlColor = "#9E9E9E";
                faceData.EmotionClass = "emotion-neutral";
                faceData.ColorStyle = "border-color: #9E9E9E";
                break;
        }

        // Now track the frame using the updated HtmlColor
        faceData.TrackingStyle = TrackImage(
            (int)(face.face.X + face.face.X / 4), 
            (int)(face.face.Y + face.face.Y / 4), 
            (int)face.face.Width, 
            (int)face.face.Height, 
            faceData.HtmlColor
        );

        faceEmotionDataList.Add(faceData);
    }

    if (!faces.Any())
    {
        faceEmotionDataList.Clear(); // Reset display when no faces detected
    }

    InvokeAsync(StateHasChanged);
}


    private string TrackImage(int x, int y, int width, int height, string HtmlColor)
    {
        return $"position:absolute; left:{x}px; top:{y}px; width:{width}px; height:{height}px; border: 2px solid {HtmlColor};";
    }

    private string GetEmotionIcon(string emotion) => emotion.ToLower() switch
    {
        "happy" => "😊",
        "sad" => "😢",
        "angry" => "😠",
        "surprise" => "😮",
        "fear" => "😨",
        "disgust" => "🤢",
        _ => "😐"
    };

    public void Dispose()
    {
        _emotionService?.Dispose();
    }
}
