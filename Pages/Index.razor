@page "/"
@using faceoff.Core

@inject faceoff.Core.FaceOffService FaceOffService

<h3>FaceOffCore Integration</h3> 

@inject ImageHandler IH
<div id="container" style="position: relative;">
    <CameraStreamer @ref=CameraStreamerReference
                Width=640
                Height=480
                OnRendered=OnRenderedHandler
                OnFrame=OnFrameHandler
                CameraID=@cameraId
                Style="width: 640px; height:480px;"
                Autostart />
    @* @if (trackingStyles.Any()) {
        <div class="frame" style="@trackingStyles[0]"></div>
    } *@
    
    @foreach (var place in trackingStyles)
    {
        Console.WriteLine(place);
        <div class="frame" style="@place">
            <div>@moodText</div>
        </div>
    }
 </div>
 <div id="bottom-container">
     <div id="mood">@moodText</div>
     <div>
@*          <button @onclick=Start>
             Start
         </button>
         <button @onclick=Stop>
             Stop
         </button> *@
     </div>
 </div>


<style>
    .relative {
        position: relative;
        width: 640px;
        height: 480px;
    }

    .emotion-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        transition: all 0.3s ease;
    }

    .face-frame {
        position: absolute;
        border: 3px solid;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .emotion-indicator {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.7);
        padding: 10px 20px;
        border-radius: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .emotion-text {
        text-align: center;
    }

    .emotion-label {
        font-size: 24px;
        font-weight: bold;
    }

    .emotion-confidence {
        font-size: 14px;
        opacity: 0.8;
    }

    .emotion-icon {
        font-size: 32px;
    }

    /* Emotion-specific styles */
    .emotion-happy {
        background: linear-gradient(rgba(76, 175, 80, 0.1), transparent);
    }

    .emotion-sad {
        background: linear-gradient(rgba(33, 150, 243, 0.1), transparent);
    }

    .emotion-angry {
        background: linear-gradient(rgba(244, 67, 54, 0.1), transparent);
    }

    .emotion-neutral {
        background: linear-gradient(rgba(158, 158, 158, 0.1), transparent);
    }
</style>

@code
 {
    private List<DetectedFace> faces = new(); 
    private List<string> trackingStyles = new(); 

    private CameraStreamer CameraStreamerReference;
    private string cameraId = null;
    private string trackingStyle = "display: none;";
    private string moodText = "Neutral";
    private string coordinateText = "";
    private string htmlColor = "grey";
    private string colorStyle = "";
    private string emotionClass = "emotion-neutral";
    private string containerStyle = "";
    private float confidence = 0;

    private EmotionDetectionService _emotionService;

    protected override void OnInitialized()
    {
        _emotionService = new EmotionDetectionService("onnx_model.onnx");
        base.OnInitialized();
    }

    private async void OnRenderedHandler()
    {
        if (await CameraStreamerReference.GetCameraAccessAsync())
        {
            await CameraStreamerReference.ReloadAsync();
        }
    }

    private async void OnFrameHandler(string data)
    {
        data = data[(data.IndexOf(',') + 1)..];

        // Converts base64 string to byteArray
        byte[] byteArray =  (System.Convert.FromBase64String(data));

        faces = FaceOffService.CameraImageFeed(byteArray);

        trackingStyles = new List<string>();;

        foreach (var face in faces)
            {
                Console.WriteLine($"FACES FOUND AT ({face.X}, {face.Y}), size ({face.Width}x{face.Height}), confidence: {face.Confidence}");
                trackingStyles.Add(TrackImage((int)(face.X + face.X / 4), (int)(face.Y + face.Y / 4), (int)face.Width, (int)face.Height));
                @* trackingStyles.Add(ToTrackingStyle(face)); *@
            }

        foreach (var style in trackingStyles) {
            Console.WriteLine($"StYLE COUNT: {trackingStyles.Count()}");
            Console.WriteLine(style);
        }

        InvokeAsync(StateHasChanged);

        TrackMood(EmotionType.Sad);

        //TODO: return x and y (middle of face) and width and height of face
        // Call TrackImage
        // Call TrackMood
    }


    private string TrackImage(int x, int y, int width, int height)
    {
        return "position:absolute;" + trackingStyle.ToTrackingStyle(x, y, width, height) + $"border: 2px solid {htmlColor}";
    }

    private void UpdateEmotionDisplay(string emotion, float confidenceValue)
    {
        confidence = confidenceValue;
        moodText = char.ToUpper(emotion[0]) + emotion.Substring(1);

        switch (emotion.ToLower())
        {
            case "happy":
                htmlColor = "#4CAF50";
                emotionClass = "emotion-happy";
                colorStyle = "border-color: #4CAF50";
                break;
            case "sad":
                htmlColor = "#2196F3";
                emotionClass = "emotion-sad";
                colorStyle = "border-color: #2196F3";
                break;
            case "angry":
                htmlColor = "#F44336";
                emotionClass = "emotion-angry";
                colorStyle = "border-color: #F44336";
                break;
            default:
                htmlColor = "#9E9E9E";
                emotionClass = "emotion-neutral";
                colorStyle = "border-color: #9E9E9E";
                break;
        }
    }

    private void ResetEmotionDisplay()
    {
        trackingStyle = "display: none;";
        moodText = "Neutral";
        htmlColor = "#9E9E9E";
        emotionClass = "emotion-neutral";
        colorStyle = "border-color: #9E9E9E";
        confidence = 0;
    }

    private string GetEmotionIcon(string emotion) => emotion.ToLower() switch
    {
        "happy" => "😊",
        "sad" => "😢",
        "angry" => "😠",
        "surprise" => "😮",
        "fear" => "😨",
        "disgust" => "🤢",
        _ => "😐"
    };

    public void Dispose()
    {
        _emotionService?.Dispose();
    }
}