@page "/"
@inject faceoff.Core.FaceOffService FaceOffService

<h3>FaceOffCore Integration</h3>

<button @onclick="AnalyzeImage">Analyze Image</button>

<p>@result</p>

@code {
    private string result = "Waiting for analysis...";

    private void AnalyzeImage()
    {

        byte[] dummyData = new byte[] { 0x01, 0x02, 0x03 };
        FaceOffService.CameraImageFeed(dummyData);
        result = "Analysis started!";
    }
}
@inject ImageHandler IH
<div id="container">
    <CameraStreamer @ref=CameraStreamerReference
                Width=640
                Height=360
                OnRendered=OnRenderedHandler
                OnFrame=OnFrameHandler
                Style="width: 100%; height: 100%;"
                CameraID=@cameraId
                Autostart />
    <div id="frame" style=@trackingStyle>
        <div id="frame-content" style="@colorStyle"/>
        <div class="text-below" style="color: @htmlColor">@moodText</div>
    </div>
 </div>
 <div id="bottom-container">
     <div id="mood">@moodText</div>
     <div>
@*          <button @onclick=Start>
             Start
         </button>
         <button @onclick=Stop>
             Stop
         </button> *@
         <button @onclick=GetCurrentFrame>
             Get Current Frame
         </button>
     </div>
 </div>


 <style>

     body {
         background-color: @htmlColor;
     }

 </style>

@code
 {
    private CameraStreamer CameraStreamerReference;

    private string cameraId = null;

    private string imageData;

    private string trackingStyle = "display: none;";

    private string moodText = "Neutral";

    private string htmlColor = "grey";

    private string colorStyle = "";

    private async void OnRenderedHandler()
    {

        // Check camera-access or ask user, if it's not allowed currently
        if (await CameraStreamerReference.GetCameraAccessAsync())
        {
            // Reloading re-initializes the stream and starts the
            // stream automatically if the Autostart parameter is set
            await CameraStreamerReference.ReloadAsync();

            // If Autostart is not set, you have to manually start the stream again
            /* await CameraStreamerReference.StartAsync(); */
        }
    }

    private async void Start()
    {
        await CameraStreamerReference.StartAsync();
    }

    private async void Stop()
    {
        await CameraStreamerReference.StopAsync();
    }

    private void OnFrameHandler(string data)
    {
        // Removes commas from string
        data = data[(data.IndexOf(',') + 1)..];

        // Converts base64 string to byteArray
        byte[] byteArray = (System.Convert.FromBase64String(data));
        FaceOffService.CameraImageFeed(byteArray);
        // Proof of storing byte array
        //IH.SaveBinary(byteArray, "C:/Users/Acrad/Desktop/coderStuff/explosion(maybe)/jeez.jpg");

        //TODO: return x and y (middle of face) and width and height of face
        // Call TrackImage
        // Call TrackMood
    }

    private async void GetCurrentFrame()
    {
        // TESTING ONLY... DELETE LATER
        imageData = await CameraStreamerReference.GetCurrentFrameAsync();
        var rand = new Random();
        var x = rand.Next(200, 280);
        var y = rand.Next(120, 150);
        TrackImage(x, y, 100, 200);
        var mood = rand.Next(0, 4);
        TrackMood((EmotionType)mood);
    }

    private void TrackImage(int x, int y, int width, int height)
    {
        trackingStyle = trackingStyle.ToTrackingStyle(x, y, width, height);
    }

    private void TrackMood(EmotionType emotion)
    {
        switch (emotion)
        {
            case EmotionType.Happy:
                colorStyle = colorStyle.ToColorStyle("green");
                moodText = "Happy";
                htmlColor = "green";
                break;
            case EmotionType.Sad:
                colorStyle = colorStyle.ToColorStyle("aqua");
                moodText = "Sad";
                htmlColor = "aqua";
                break;
            case EmotionType.Angry:
                colorStyle = colorStyle.ToColorStyle("red");
                moodText = "Angry";
                htmlColor = "red";
                break;
            default:
                colorStyle = colorStyle.ToColorStyle("grey");
                moodText = "Neutral";
                htmlColor = "grey";
                break;
        }
    }



}