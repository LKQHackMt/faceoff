@page "/"
@using faceoff.Core


@inject faceoff.Core.FaceOffService FaceOffService

<h3>FaceOffCore Integration</h3> 

@inject ImageHandler IH
<div id="container" style="position: relative;">
    <CameraStreamer @ref=CameraStreamerReference
                Width=640
                Height=480
                OnRendered=OnRenderedHandler
                OnFrame=OnFrameHandler
                CameraID=@cameraId
                Style="width: 640px; height:480px;"
                Autostart />
    @* @if (trackingStyles.Any()) {
        <div class="frame" style="@trackingStyles[0]"></div>
    } *@
    
    @foreach (var place in trackingStyles)
    {
        Console.WriteLine(place);
        <div class="frame" style="@place"></div>
    }
 </div>
 <div id="bottom-container">
     <div id="mood">@moodText</div>
     <div>
@*          <button @onclick=Start>
             Start
         </button>
         <button @onclick=Stop>
             Stop
         </button> *@
     </div>
 </div>


<style>

    body {
    background-color: @htmlColor;
    }

</style>

@code
 {
    private List<DetectedFace> faces = new(); 
    private List<string> trackingStyles = new(); 

    private CameraStreamer CameraStreamerReference;

    private string cameraId = null;

    private string imageData;

    private string trackingStyle = "display: none;";

    private string moodText = "Neutral";

    private string coordinateText = "";
    private string htmlColor = "grey";

    private string colorStyle = "";

    private int width = 640;
    private int height = 480;

    private List<DetectedFace> detectFaces = new List<DetectedFace>();

    //private object faceDetectedResponse;

    private async void OnRenderedHandler()
    {

        // Check camera-access or ask user, if it's not allowed currently
        if (await CameraStreamerReference.GetCameraAccessAsync())
        {
            // Reloading re-initializes the stream and starts the
            // stream automatically if the Autostart parameter is set
            await CameraStreamerReference.ReloadAsync();

            // If Autostart is not set, you have to manually start the stream again
            /* await CameraStreamerReference.StartAsync(); */
        }
    }

    private async void Start()
    {
        await CameraStreamerReference.StartAsync();
    }

    private async void Stop()
    {
        await CameraStreamerReference.StopAsync();
    }

    private string ToTrackingStyle(DetectedFace face)
    {
        return $"position: absolute; left: {face.X}px; top: {face.Y}px; width: {face.Width}px; height: {face.Height}px; border: 2px solid {htmlColor};";
    }

    private void OnFrameHandler(string data)
    {       
        // Removes commas from string 
        data = data[(data.IndexOf(',') + 1)..];

        // Converts base64 string to byteArray
        byte[] byteArray =  (System.Convert.FromBase64String(data));

        faces = FaceOffService.CameraImageFeed(byteArray);

        trackingStyles = new List<string>();;

        foreach (var face in faces)
            {
                Console.WriteLine($"FACES FOUND AT ({face.X}, {face.Y}), size ({face.Width}x{face.Height}), confidence: {face.Confidence}");
                trackingStyles.Add(TrackImage((int)(face.X + face.X / 4), (int)(face.Y + face.Y / 4), (int)face.Width, (int)face.Height));
                @* trackingStyles.Add(ToTrackingStyle(face)); *@
            }

        foreach (var style in trackingStyles) {
            Console.WriteLine($"StYLE COUNT: {trackingStyles.Count()}");
            Console.WriteLine(style);
        }

        InvokeAsync(StateHasChanged);

        TrackMood(EmotionType.Sad);

        //TODO: return x and y (middle of face) and width and height of face
        // Call TrackImage
        // Call TrackMood
    }


    private string TrackImage(int x, int y, int width, int height)
    {
        return "position:absolute;" + trackingStyle.ToTrackingStyle(x, y, width, height) + $"border: 2px solid {htmlColor}";
    }

    private void TrackMood(EmotionType emotion)
    {
        switch (emotion)
        {
            case EmotionType.Happy:
                colorStyle = colorStyle.ToColorStyle("green");
                moodText = "Happy";
                htmlColor = "green";
                break;
            case EmotionType.Sad:
                colorStyle = colorStyle.ToColorStyle("aqua");
                moodText = "Sad";
                htmlColor = "aqua";
                break;
            case EmotionType.Angry:
                colorStyle = colorStyle.ToColorStyle("red");
                moodText = "Angry";
                htmlColor = "red";
                break;
            default:
                colorStyle = colorStyle.ToColorStyle("grey");
                moodText = "Neutral";
                htmlColor = "grey";
                break;
        }
    }



}