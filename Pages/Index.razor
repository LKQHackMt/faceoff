@page "/"
@using faceoff.Core

@inject faceoff.Core.FaceOffService FaceOffService

<h3>FaceOffCore Integration</h3> 

@inject ImageHandler IH
<div id="container" style="position: relative;">
    <CameraStreamer @ref=CameraStreamerReference
                Width=640
                Height=480
                OnRendered=OnRenderedHandler
                OnFrame=OnFrameHandler
                CameraID=@cameraId
                Style="width: 640px; height:480px;"
                Autostart />
    @* @if (trackingStyles.Any()) {
        <div class="frame" style="@trackingStyles[0]"></div>
    } *@
    
    @foreach (var place in trackingStyles) {
        Console.WriteLine(place);
        <div class="frame" style="@place">
            <div>@moodText</div>
        </div>
    }
</div>
@* <div class="emotion-container @emotionClass" style="@containerStyle">
    <div class="face-frame" style="@trackingStyle">
        <div class="frame-content" style="@colorStyle" />
    </div>
    <div class="emotion-indicator">
        <div class="emotion-text" style="color: @htmlColor">
            <span class="emotion-label">@moodText</span>
            <div class="emotion-confidence">@(confidence > 0 ? $"{confidence:P0}" : "")</div>
        </div>
        <div class="emotion-icon">@GetEmotionIcon(moodText)</div>
    </div>
</div> *@

@code
 {
    private List<DetectedFace> faces = new(); 
    private List<string> trackingStyles = new(); 

    private CameraStreamer CameraStreamerReference;
    private string cameraId = null;
    private string trackingStyle = "display: none;";
    private string moodText = "Neutral";
    private string coordinateText = "";
    private string htmlColor = "grey";
    private string colorStyle = "";
    private string emotionClass = "emotion-neutral";
    private string containerStyle = "";
    private float confidence = 0;

    private EmotionDetectionService _emotionService;

    protected override void OnInitialized()
    {
        _emotionService = new EmotionDetectionService("onnx_model.onnx");
        base.OnInitialized();
    }

    private async void OnRenderedHandler()
    {
        if (await CameraStreamerReference.GetCameraAccessAsync())
        {
            await CameraStreamerReference.ReloadAsync();
        }
    }

    private async void OnFrameHandler(string data)
    {
        data = data[(data.IndexOf(',') + 1)..];

        // Converts base64 string to byteArray
        byte[] byteArray =  (System.Convert.FromBase64String(data));

        faces = FaceOffService.CameraImageFeed(byteArray);

        trackingStyles = new List<string>();;

        foreach (var face in faces){
            Console.WriteLine($"FACES FOUND AT ({face.X}, {face.Y}), size ({face.Width}x{face.Height}), confidence: {face.Confidence}");
            trackingStyles.Add(TrackImage((int)(face.X + face.X / 4), (int)(face.Y + face.Y / 4), (int)face.Width, (int)face.Height));

            // Detect emotion for each face
            var emotionResult = await _emotionService.DetectEmotion(face, byteArray);
            UpdateEmotionDisplay(emotionResult.Emotion, emotionResult.Confidence);
        }


        foreach (var style in trackingStyles) {
            Console.WriteLine($"StYLE COUNT: {trackingStyles.Count()}");
            Console.WriteLine(style);
        }

        if (!faces.Any())
        {
            // Reset display when no faces detected
            ResetEmotionDisplay();
        }

        InvokeAsync(StateHasChanged);

        @* TrackMood(EmotionType.Sad); *@

        //TODO: return x and y (middle of face) and width and height of face
        // Call TrackImage
        // Call TrackMood
    }


    private string TrackImage(int x, int y, int width, int height)
    {
        return "position:absolute;" + trackingStyle.ToTrackingStyle(x, y, width, height) + $"border: 2px solid {htmlColor}";
    }

    private void UpdateEmotionDisplay(string emotion, float confidenceValue)
    {
        confidence = confidenceValue;
        moodText = char.ToUpper(emotion[0]) + emotion.Substring(1);

        switch (emotion.ToLower())
        {
            case "happy":
                htmlColor = "#4CAF50";
                emotionClass = "emotion-happy";
                colorStyle = "border-color: #4CAF50";
                break;
            case "sad":
                htmlColor = "#2196F3";
                emotionClass = "emotion-sad";
                colorStyle = "border-color: #2196F3";
                break;
            case "angry":
                htmlColor = "#F44336";
                emotionClass = "emotion-angry";
                colorStyle = "border-color: #F44336";
                break;
            default:
                htmlColor = "#9E9E9E";
                emotionClass = "emotion-neutral";
                colorStyle = "border-color: #9E9E9E";
                break;
        }
    }

    private void ResetEmotionDisplay()
    {
        trackingStyle = "display: none;";
        moodText = "Neutral";
        htmlColor = "#9E9E9E";
        emotionClass = "emotion-neutral";
        colorStyle = "border-color: #9E9E9E";
        confidence = 0;
    }

    private string GetEmotionIcon(string emotion) => emotion.ToLower() switch
    {
        "happy" => "😊",
        "sad" => "😢",
        "angry" => "😠",
        "surprise" => "😮",
        "fear" => "😨",
        "disgust" => "🤢",
        _ => "😐"
    };

    public void Dispose()
    {
        _emotionService?.Dispose();
    }
}