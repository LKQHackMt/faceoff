@page "/"
@using faceoff.Core


@inject faceoff.Core.FaceOffService FaceOffService

@* <h3>FaceOffCore Integration</h3> 

 <button @onclick="AnalyzeImage">Analyze Image</button> *

 @code {
    private string result = "Waiting for analysis...";

    private void AnalyzeImage()
    {

        //byte[] dummyData = new byte[] { 0x01, 0x02, 0x03 }; 
        //FaceOffService.CameraImageFeed(dummyData);
        result = "Analysis started!";
    }
}

 <p>@result</p>*@

@inject ImageHandler IH
<div id="container" >
    <CameraStreamer @ref=CameraStreamerReference
    Width=640
    Height=480
    OnRendered=OnRenderedHandler
    OnFrame=OnFrameHandler
    Style="width: 640px; height:480px;"
    CameraID=@cameraId
    Autostart />

    <div id="frame" style=@trackingStyle>
        <div id="frame-content" style="@colorStyle"/>
        <div class="text-below" style="color: @htmlColor">@moodText</div>
        <div class="text-below" style="color: @htmlColor">@coordinateText</div>
    </div>
</div>


<style>

    body {
    background-color: @htmlColor;
    }

</style>

@code
{
    private CameraStreamer CameraStreamerReference;

    private string cameraId = null;

    private string imageData;

    private string trackingStyle = "display: none;";

    private string moodText = "Neutral";

    private string coordinateText = "";
    private string htmlColor = "grey";

    private string colorStyle = "";

    private int width = 640;
    private int height = 480;

    private List<DetectedFace> detectFaces = new List<DetectedFace>();

    //private object faceDetectedResponse;

    private async void OnRenderedHandler()
    {

        // Check camera-access or ask user, if it's not allowed currently
        if (await CameraStreamerReference.GetCameraAccessAsync())
        {
            // Reloading re-initializes the stream and starts the
            // stream automatically if the Autostart parameter is set
            await CameraStreamerReference.ReloadAsync();

            // If Autostart is not set, you have to manually start the stream again
            /* await CameraStreamerReference.StartAsync(); */
        }
    }

    private async void Start()
    {
        await CameraStreamerReference.StartAsync();
    }

    private async void Stop()
    {
        await CameraStreamerReference.StopAsync();
    }

    private void OnFrameHandler(string data)
    {       
        // Removes commas from string 
        data = data[(data.IndexOf(',') + 1)..];

        // Converts base64 string to byteArray
        byte[] byteArray =  (System.Convert.FromBase64String(data));
        
        
        var faces = FaceOffService.CameraImageFeed(byteArray);
        
        foreach(var face  in faces)
        {
            coordinateText = (int)(face.X) + " " + (int)(face.Y);
            TrackImage((int)(face.X+face.X/4), (int)(face.Y+face.Y/4), (int)(face.Width+10), (int)(face.Height+10);
        }
        
        // Proof of storing byte array
        //IH.SaveBinary(byteArray, "C:/Users/Acrad/Desktop/coderStuff/explosion(maybe)/jeez.jpg");

        //TODO: return x and y (middle of face) and width and height of face
        // Call TrackImage
        // Call TrackMood
    }


    private void TrackImage(int x, int y, int width, int height)
    {
        trackingStyle = trackingStyle.ToTrackingStyle(x, y, width, height);
    }

    private void TrackMood(EmotionType emotion)
    {
        switch (emotion)
        {
            case EmotionType.Happy:
                colorStyle = colorStyle.ToColorStyle("green");
                moodText = "Happy";
                htmlColor = "green";
                break;
            case EmotionType.Sad:
                colorStyle = colorStyle.ToColorStyle("aqua");
                moodText = "Sad";
                htmlColor = "aqua";
                break;
            case EmotionType.Angry:
                colorStyle = colorStyle.ToColorStyle("red");
                moodText = "Angry";
                htmlColor = "red";
                break;
            default:
                colorStyle = colorStyle.ToColorStyle("grey");
                moodText = "Neutral";
                htmlColor = "grey";
                break;
        }
    }



}